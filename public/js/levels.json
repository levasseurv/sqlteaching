[{"name": "Sélectionner tous les champs",
  "short_name": "select",
  "database_type": "famille",
  "answer": {"columns": ["id", "nom", "livres_lus"],
    "values": [[1, "Dave", 200],
      [2, "Marie", 180],
      [3, "Chaton", 0]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Trouver tous les membres de la famille. Afficher toutes leurs caractéristiques."},

  {"name": "Sélectionner des champs spécifiques",
    "short_name": "select_columns",
    "database_type": "famille",
    "answer": {"columns": ["nom", "livres_lus"],
      "values": [["Dave", 200],
        ["Marie", 180],
        ["Chaton", 0]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Trouver le nom et le nombre de livres lus des membres de la famille."},

  {"name": "Filtrer des données",
    "short_name": "where_equals",
    "database_type": "famille",
    "answer": {"columns": ["id", "nom", "livres_lus"],
      "values": [[3, "Chaton", 0]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Trouver le membre de la famille dont le id est 3"},

  {"name": "Opérateurs de comparaison",
    "short_name": "where_greater_than",
    "database_type": "famille",
    "answer": {"columns": ["nom"],
      "values": [["Dave"], ["Marie"]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Trouver les noms des membres de la famille qui ont lu 180 livres et plus"},

  {"name": "Opérateur logique AND",
    "short_name": "and",
    "database_type": "amis_chaton",
    "answer": {"columns": ["id", "nom", "type", "taille_cm"],
      "values": [[5, "Odie", "chien", 40],
        [6, "Pitou", "chien", 35]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Trouver les amis chiens de Chaton qui font moins de 45cm."},

  {"name": "Opérateur logique OR",
    "short_name": "or",
    "database_type": "amis_chaton",
    "answer": {"columns": ["id", "nom", "type", "taille_cm"],
      "values": [[3, "Frisou", "chat", 30],
        [4, "Leela", "chat", 25],
        [5, "Odie", "chien", 40],
        [6, "Pitou", "chien", 35],
        [7, "Jojo", "chien", 55]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Trouver les amis de Chaton qui sont des chiens ou qui font moins de 45cm."},

  {"name": "Spécifier un domaine de valeurs (IN)",
    "short_name": "in",
    "database_type": "amis_chaton",
    "answer": {"columns": ["id", "nom", "type", "taille_cm"],
      "values": [[1, "Dave", "humain", 180],
        [2, "Marie", "humain", 160]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton.  Trouver les amis de Chaton qui ne sont ni des chats, ni des chiens. Utiliser les opérateurs NOT et IN dans votre requête"},

  {"name": "Retirer les répétitions (DISTINCT)",
    "short_name": "distinct",
    "database_type": "amis_chaton",
    "answer": {"columns": ["type"],
      "values": [["humain"], ["chien"]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Retourner les types d'amis de Chaton qui font plus de 50cm. Retirer les répétitions."},

  {"name": "Ordonner les résultats (ORDER BY)",
    "short_name": "order_by",
    "database_type": "amis_chaton",
    "answer": {"columns": ["id", "nom", "type", "taille_cm"],
      "values": [[1, "Dave", "humain", 180],
        [2, "Marie", "humain", 160],
        [7, "Jojo", "chien", 55],
        [5, "Odie", "chien", 40],
        [6, "Pitou", "chien", 35],
        [3, "Frisou", "chat", 30],
        [4, "Leela", "chat", 25]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Afficher tous les amis de Chaton en ordre décroissant de taille."},

  {"name": "Limiter le nombre d'enregistrements (LIMIT)",
    "short_name": "limit",
    "database_type": "amis_chaton",
    "answer": {"columns": ["id", "nom", "type", "taille_cm"],
      "values": [[1, "Dave", "humain", 180],[2, "Marie", "humain", 160]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Afficher ses deux amis les plus grands."},

  {"name": "Les alias (AS)",
    "short_name": "as",
    "database_type": "amis_chaton",
    "answer": {"columns": ["meilleurs_amis"],
      "values": [["Frisou"],["Leela"]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Afficher les noms de ses amis chats et renommer, lors de l'affichage, le champ <code>nom</code> pour <code>meilleurs_amis</code>."},

  {"name": "Les opérateurs mathématiques",
    "short_name": "maths",
    "database_type": "amis_chaton",
    "answer": {"columns": ["id", "nom", "type", "taille_m"],
      "values": [[1, "Dave", "humain", 1.80],
        [2, "Marie", "humain", 1.60],
        [3, "Frisou", "chat", 0.30],
        [4, "Leela", "chat", 0.25],
        [5, "Odie", "chien", 0.40],
        [6, "Pitou", "chien", 0.35],
        [7, "Jojo", "chien", 0.55]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Afficher ses amis en modifiant leur taille pour qu'elle soit calculée en mètres. Modifier le nom du champ <code>taille_cm</code> pour <code>taille_m</code>."},

  {"name": "COUNT(*)",
    "short_name": "count",
    "database_type": "amis_chaton",
    "answer": {"columns": ["COUNT(*)"],
      "values": [[7]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. À l'aide d'une requête SQL afficher le nombres d'amis de Chaton."},

  {"name": "COUNT(*) ... WHERE",
    "short_name": "count_where",
    "database_type": "amis_chaton",
    "answer": {"columns": ["COUNT(*)"],
      "values": [[3]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Retourner le nombre d'amis de type chien."},

  {"name": "Somme des valeurs (SUM)",
    "short_name": "sum",
    "database_type": "family_and_legs",
    "answer": {"columns": ["SUM(livres_lus)"],
      "values": [[380]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Trouver la somme des livres lus par cette famille."},

  {"name": "Moyenne (AVG)",
    "short_name": "avg",
    "database_type": "family_and_legs",
    "answer": {"columns": ["AVG(livres_lus)"],
      "values": [[126.66666666666667]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Trouver la moyenne du nombre de livres lus dans cette famille."},

  {"name": "Minimum et maximum",
    "short_name": "max_min",
    "database_type": "family_and_legs",
    "answer": {"columns": ["MAX(livres_lus)"],
      "values": [[200]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Trouver le nombre maximal de livres lus par une personne dans cette famille."},

  {"name": "Agrégation sur les valeurs d'un champ (GROUP BY)",
    "short_name": "group_by",
    "database_type": "amis_chaton",
    "answer": {"columns": ["MAX(taille_cm)", "type"],
      "values": [[30, "chat"],
        [55, "chien"],
        [180, "humain"]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Retourner la taille maximale de chaque type d'amis, suivie du type."},

  {"name": "Filtres sur les agrégats (HAVING)",
    "short_name": "having",
    "database_type": "amis_chaton",
    "answer": {"columns": ["MAX(taille_cm)", "type"],
      "values": [[30, "chat"],
        [55, "chien"]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les amis de Chaton. Retourner la taille maximale de chaque type d'amis, suivie du type. Garder seulement les types dont la taille maximale est inférieure à 100 cm."},

  {"name": "Requêtes imbriquées",
    "short_name": "nested",
    "database_type": "family_and_legs",
    "required": ["(", ")"],
    "custom_error_message": "You must use a nested query in your answer.",
    "answer": {"columns": ["id", "nom", "livres_lus", "nb_jambes"],
      "values": [[1, "Dave", 200, 2]]},
    "prompt": "Ci-dessous se trouve la table contenant tous les membres d'une famille. Retourner les membres de la famille qui ont lu le maximum de livre. Votre requête devrait être de la forme <code>SELECT ... FROM .... WHERE champ IN (SELECT .... FROM ...)</code>"},

  {"name": "Jointure interne",
    "short_name": "joins",
    "database_type": "tv",
    "answer": {"columns": ["nom", "nom_acteur"],
      "values": [["Doogie Howser", "Neil Patrick Harris"],
        ["Barney Stinson", "Neil Patrick Harris"],
        ["Lily Aldrin", "Alyson Hannigan"],
        ["Willow Rosenberg", "Alyson Hannigan"]]},
    "prompt": "Voici les tables qui représentent des acteurs et leurs personnages dans des émissions de télé. Afficher les noms des personnages et les noms des acteurs associés."},

  {"name": "Jointure et filtre de données",
    "short_name": "joins_with_where",
    "required": ["Willow Rosenberg", "How I Met Your Mother"],
    "database_type": "tv",
    "answer": {"columns": ["nom", "nom_emission"],
      "values": [["Doogie Howser", "Doogie Howser, M.D."]]},
    "prompt": "Voici les tables qui représentent des acteurs et leurs personnages dans des émissions de télé. Retourner les noms des <strong>personnages</strong> (sauf Willow Rosenberg) et les <strong>émissions</strong> de télé correspondantes (sauf How I Met Your Mother). Notez que vous pouvez ajouter un filtre (WHERE) dans une requête, même s'il y a jointure."},

  {"name": "Jointure externe gauche",
    "short_name": "left_joins",
    "database_type": "tv_extra",
    "answer": {"columns": ["nom", "nom_acteur"],
      "values": [["Doogie Howser", "Neil Patrick Harris"],
        ["Barney Stinson", "Neil Patrick Harris"],
        ["Lily Aldrin", "Alyson Hannigan"],
        ["Willow Rosenberg", "Alyson Hannigan"],
        ["Steve Urkel", null],
        ["Homer Simpson", null]]},
    "prompt": "Voici les tables qui représentent des acteurs et leurs personnages dans des émissions de télé.  Afficher <strong>tous</strong> les noms des personnages et les noms des acteurs associés."},

  {"name": "Jointure d'une table avec elle-même",
    "short_name": "self_join",
    "database_type": "self_join",
    "answer": {"columns": ["sbire", "patron"],
      "values": [["Patrick Smith", "Abigail Reed"],
        ["Abigail Reed", "Bob Carey"],
        ["Bob Carey", "Maxine Tang"]]},
    "prompt": "Voici une table qui contient les employés d'une petite entreprise. Afficher le nom des employés et le nom de leur superviseur. Le nom des employés devrait être dans une colonne nommée 'sbire' et le nom des superviseurs dans une colonne 'patron'. <br/><br/> Notez que vous devrez utiliser des alias de colonnes et de tables pour compléter cet exercice. Votre requête aura cette forme: <pre><code>SELECT table1.champ AS champ1, table2.nom AS champ2\nFROM table AS table1, table AS table2\nWHERE table1.champX = table2.champY</code></pre>"},

  {"name": "LIKE",
    "short_name": "like",
    "database_type": "robot",
    "answer": {"columns": ["id", "nom"],
      "values": [[1, "Robot 2000"],
        [2, "Champion Robot 2001"],
        [4, "Turbo Robot 2002"],
        [5, "Super Robot 2003"],
        [6, "Super Turbo Robot 2004"]]},
    "prompt": "Voici une table qui contient des robots. Afficher tous les robots dont le nom contient 'Robot' suivi d'une année entre 2000 et 2009. <br/><em>Indice : traiter l'année comme du texte - quels caractères sont permis ?</em>"},

  {"name": "SUBSTR",
    "short_name": "substr",
    "database_type": "robot_code",
    "answer": {"columns": ["code"],
      "values": [["R2000"],
        ["D0001"],
        ["R2002"],
        ["R2003"],
        ["U2111"]]},
    "prompt": "Voici une table qui contient des modèles de robots avec leur nom et leur lieu de naissance. Retourner le code de tous les robots construits au Québec (ex. R2000 pour le premier)"},

  {"name": "Manipuler des dates",
    "short_name": "date",
    "database_type": "celebs_born",
    "answer": {"columns": ["nom"],
      "values": [["Justin Timberlake"],
        ["Taylor Swift"]]},
    "prompt": "Voici une table qui contient la date de naissance (AAAA-MM-JJ) de quelques célébrités. Retourner le nom de ceux et celles qui sont né(e)s après le 1er septembre 1980."}
]